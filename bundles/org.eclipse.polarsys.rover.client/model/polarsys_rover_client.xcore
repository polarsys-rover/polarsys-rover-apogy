/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="PolarSysRoverClient",
		  copyrightText="Copyright (c) 2015-2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    Pierre Allard (Pierre.Allard@canada.ca), 
    Regent L'Archeveque (Regent.Larcheveque@canada.ca),
    Sebastien Gemme (Sebastien.Gemme@canada.ca),
    Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="PolarSysRoverClient",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  suppressGenModelAnnotations="false",
		  dynamicTemplates="true", 
		  templateDirectory="platform:/plugin/ca.gc.asc_csa.apogy.common.emf.templates")
@GenModel(modelDirectory="/org.eclipse.polarsys.rover.client/src-generated")
@GenModel(editDirectory="/org.eclipse.polarsys.rover.client.edit/src-generated")
package org.eclipse.polarsys.rover.client

import ca.gc.asc_csa.apogy.common.emf.Disposable
import ca.gc.asc_csa.apogy.addons.sensors.imaging.AbstractCamera
import ca.gc.asc_csa.apogy.addons.sensors.fov.RectangularFrustrumFieldOfView

/*
 * This class is used to represent a position of a particular object
 * in space.  In particular, this provides both a Cartesian coordinate
 * location as well as an angle corresponding to the object's pose.
 */
class Position
{
	/* 
	 * This is the position's X coordinate (given in metres)
	 */
	@GenModel(children="false",
			  notify="true",
			  apogy_units="m")
	double x = "0.0"
	/*
	 * This is the position's Y coordinate (given in metres)
	 */
	@GenModel(children="false",
			  notify="true",
			  apogy_units="m")
	double y = "0.0"
	/*
	 * This is the pose angle (in radians) of an object, which
	 * specifies a rotation around the Z axis.  
	 */
	@GenModel(children="false",
			  notify="true",
			  apogy_units="rad")
	double theta = "0.0"
}

abstract class PolarSysCamera extends AbstractCamera{
	/*
	 * The field of view for this particular camera
	 */
	@GenModel(notify="true",
			  propertyCategory="Field Of View")
	contains RectangularFrustrumFieldOfView[1] fov
	
	/*
	 * This is whether or not the camera has been
	 * successfully initialized; initially false
	 * @see #init()
	 */
	@GenModel(children="false",
			  notify="true",
			  propertyCategory="Status")
	boolean initialized = "false"
	
	/* 
	 * This operation performs any required initialization
	 * operations for the camera.  This is typically called
	 * before any other operation.
	 * @return True if the initialization was successful, false otherwise.
	 */
	 
	op boolean init()
	/*
	 * Whether or not image streaming is enabled.
	 */
	@GenModel(children="false",
			  notify="true",
			  propertyCategory="Status")
	boolean streamingEnabled = "false"
	
	/*
	 * This operation enables or disables image streaming.
	 * When image streaming is enabled, images are updated at about 1 Hz.
	 */
	op boolean commandStreaming(boolean streamingEnabled)
}

/*
 * This class represents the PolarSys Rover Platform client.
 * 
 */
abstract class PolarSysRoverPlatformClient extends Disposable{
	/*
	 * This is whether or not the mobile platform has
	 * been initialized; initially false.
	 * @see #init()
	 */
	@GenModel(children="false",
			  property="Readonly",
			  propertyCategory="Status")
	boolean initialized = "false"
	/*
	 * This is whether or not the mobile platform has
	 * been disposed; initially false.
	 * @see #dispose()
	 */
	@GenModel(children="false",
			  property="Readonly",
			  propertyCategory="Status")
	boolean disposed = "false"
	/*
	 * This is the mobile platform's current estimate of the error
	 * in its position (given in metres.)
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="Position",
			  apogy_units="m")
	double positionError = "0.0"

	/* 
	 * This is the current angular position (in radians) of
	 * the mobile platform's front left wheels.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="PowerLevels",
			  apogy_units="%")
	double leftPowerLevel = "0.0"
	
	/* 
	 * This is the current angular position (in radians) of
	 * the mobile platform's front left wheels.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="PowerLevels",
			  apogy_units="%")
	double rightPowerLevel = "0.0"
	
	/* 
	 * This is the current angular position (in radians) of
	 * the mobile platform's front left wheels.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="Position",
			  apogy_units="rad")
	double leftWheelPosition = "0.0"
	
	/*
	 * This is the current angular position (in radians) of
	 * the mobile platform's front right wheels.
	 */
	@GenModel(children="false",
			  notify="true",
			  property="Readonly",
			  propertyCategory="Position",
			  apogy_units="rad")
	double rightWheelPosition = "0.0"
	
	/*
	 * Front Sonar Level.
	 */	
	int frontSonar = "0"
	
	/* 
	 * This is the mobile platform's current position
	 */
	@GenModel(notify="true",
			  propertyCategory="Position")
	contains transient Position[1] position
				
	/* 
	 * Front Camera.
	 */
	/* 
	 * This is the mobile platform's current position
	 */
	@GenModel(notify="true",
			  propertyCategory="Camera")
	contains transient PolarSysCamera[1] frontCamera		
		
	
	/*
	 * This is the radius (in m) of the mobile platform's wheels.
	 */
	transient readonly double wheelRadius = "0.25"

	/**
	 * This is the length (in m) of the mobile platform's track
	 */
	transient readonly double wheelTrack = "0.64"

	/**
	 * This is the time (in milliseconds) between subsequent movement steps of
	 * the mobile platform.
	 */
	transient readonly int moveWaitPeriod = "30"

	/**
	 * This is the minimum linear velocity (in metres / second) that a moveTo()
	 * operates at.
	 */
	transient readonly double moveToMinLinSpeed = "1.5"

	/**
	 * This is the amount of error is taking place per metre of distance
	 * traveled by the mobile platform.
	 */
	transient readonly double ErrorPerMeter = "0.05"
	
	/**
	 * This is the maximum power level that can be sent to the rover
	 */
	transient readonly double maxPowerLevel = "1"
	
	/**
	 * This is the maximum power level that the controller sends
	 */
	transient readonly double maxCtrPowerLevel = "100"
	
	/**
	 * This is the maximum angular velocity that the controller sends
	 */
	transient readonly double maxAngVelocity = "2"
	
	/**
	 * This is the maximum linear velocity that the controller sends
	 */
	transient readonly double maxLinVelocity = "2"
	
	/**
	 * This is the distance between the wheels
	 */
	transient readonly double distanceBetweenWheels = "2"
		
		
		
	/*
	 * This operation is used to initialize the mobile platform
	 * and as such, it will perform the required creation and
	 * initialization steps.
	 * 
	 * @return Whether or not the mobile platform was successfully initialized
	 */
	op boolean init()
	
	/*
	 * This operation is used to change the mobile platform to
	 * have the coordinates and pose matching the given position.
	 * That new position will be considered the new starting place
	 * for the mobile platform and as such, the accumulated error will
	 * be cleared; all error will be relative to that new position.
	 * 
	 * @param position The mobile platform's new desired position
	 */
	op void resetPosition(Position position)
	
	/*
	 * This operation is used to clear the mobile platform's positional
	 * error; this could be used to indicate that all error should now
	 * be taken in respect to the robot's current position.
	 */
	op void clearPositionError()
	
	/*
	 * This operation is used to stop the mobile platform, if it is 
	 * currently moving.
	 */
	op void stop()
	
	/*
	 * The operation is used to change the mobile platform's linear and
	 * angular velocities, which are in metres / second and radians / second,
	 * respectively.
	 * <p>
	 * Note 1: Unlike the traditional definition of linear velocity as a vector,
	 * this is simply a signed scalar; a positive value indicates the speed
	 * forward while a negative value is the speed backwards.  Zero means there
	 * is no movement.
	 * <p>
	 * Note 2: Unlike the traditional definition of angular velocity as a vector,
	 * this is simply a signed scalar; a positive value is the rotation in the
	 * clockwise direction while a negative value implies the rotation is in the
	 * counter-clockwise direction.  Zero means there is no rotation.
	 * 
	 * @param linearVelocity The commanded linear velocity.
	 * @param angularVelocity The commanded angular velocity.
	 * @see #cmdLinearVelocity(double)
	 * @see #cmdAngularVelocity(double)
	 */
	op void cmdVelocities(@GenModel(apogy_units="m/s") double linearVelocity,
					      @GenModel(apogy_units="rad/s") double angularVelocity)
				
					      
    op void cmdPowerLevel(double leftPowerLevel, double rightPowerLevel) 
}