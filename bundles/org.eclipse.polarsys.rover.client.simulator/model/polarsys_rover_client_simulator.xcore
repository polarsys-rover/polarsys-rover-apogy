/*
 * Copyright (c) 2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Pierre Allard (Pierre.Allard@canada.ca), 
 *     Regent L'Archeveque (Regent.Larcheveque@canada.ca),
 *     Sebastien Gemme (Sebastien.Gemme@canada.ca),
 *     Canadian Space Agency (CSA) - Initial API and implementation
 */
@GenModel(prefix="PolarSysRoverClientSimulator",
		  copyrightText="Copyright (c) 2015-2016 Canadian Space Agency (CSA) / Agence spatiale canadienne (ASC).
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    Pierre Allard (Pierre.Allard@canada.ca), 
    Regent L'Archeveque (Regent.Larcheveque@canada.ca),
    Sebastien Gemme (Sebastien.Gemme@canada.ca),
    Canadian Space Agency (CSA) - Initial API and implementation",
		  modelName="PolarSysRoverClient",
		  childCreationExtenders="true",
		  extensibleProviderFactory="true",
		  suppressGenModelAnnotations="false",
		  dynamicTemplates="true", 
		  templateDirectory="platform:/plugin/ca.gc.asc_csa.apogy.common.emf.templates")
@GenModel(modelDirectory="/org.eclipse.polarsys.rover.client.simulator/src-generated")
@GenModel(editDirectory="/org.eclipse.polarsys.rover.client.simulator.edit/src-generated")

package org.eclipse.polarsys.rover.client.simulator

import org.eclipse.polarsys.rover.client.PolarSysRoverPlatformClient

@GenModel(dynamic="false")
class PolarSysRoverPlatformClientSimulator extends PolarSysRoverPlatformClient{
	

	/*
	 * This is the radius (in m) of the mobile platform's wheels.
	 */
	transient readonly double wheelRadius = "0.25"
	/**
	 * This is the degree symbol, as expressed in unicode
	 */
	transient readonly String degreeSYM = "\u00b0"

	/**
	 * This is the length (in m) of the mobile platform's track
	 */
	transient readonly double wheelTrack = "0.64"

	/**
	 * This is the time (in milliseconds) between subsequent movement steps of
	 * the mobile platform.
	 */
	transient readonly int moveWaitPeriod = "30"

	/**
	 * This is the minimum linear velocity (in metres / second) that a moveTo()
	 * operates at.
	 */
	transient readonly double moveToMinLinSpeed = "1.5"

	/**
	 * This is the amount of error is taking place per metre of distance
	 * traveled by the mobile platform.
	 */
	transient readonly double ErrorPerMeter = "0.05"
	
	/**
	 * This is the maximum power level that can be sent to the rover
	 */
	transient readonly double maxPowerLevel = "1"
	
	/**
	 * This is the minimum power level that can be sent to the rover
	 */
	transient readonly double minPowerLevel = "-1"
	
	/**
	 * This is the maximum power level that the controller sends
	 */
	transient readonly double maxCtrPowerLevel = "100"
	
	/**
	 * This is the minimum power level that can be sent to the rover
	 */
	transient readonly double minCtrPowerLevel = "-100"
	
	/**
	 * This is the maximum angular velocity that the controller sends
	 */
	transient readonly double maxAngVelocity = "2"
	
	/**
	 * This is the minimum angular velocity that the controller sends
	 */
	transient readonly double minAngVelocity = "-2"
	
	/**
	 * This is the maximum linear velocity that the controller sends
	 */
	transient readonly double maxLinVelocity = "2"
	
	/**
	 * This is the minimum linear velocity that the controller sends
	 */
	transient readonly double minLinVelocity = "-2"
	
	/**
	 * This is the distance between the wheels
	 */
	transient readonly double distanceBetweenWheels = "2"
	
	
}